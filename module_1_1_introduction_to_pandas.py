# -*- coding: utf-8 -*-
"""Module 1.1 - Introduction to Pandas.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZZChWbzGp2Hv7dM-C1y1jSFgG8mV31cv

Contents

1.   Creating Series
2.   Datatypes in Pandas
"""

#install pandas
#!pip install pandas

#import pandas
import pandas as pd

"""List to Series and DataFrame"""

# Create a list of data
data = [1,2,3,4,5,10]

data

type(data)

# Create a Series from the list
s = pd.Series(data)
s

type(s)

# Create a DataFrame from the Series
df = pd.DataFrame(s, columns=['num'])
df

data

# Create a DataFrame from the Series
df1 = pd.DataFrame(data, columns=['num2'])
df1

s2 = df1['num2']

s2

type(s2)

#Create a series for 2 integer columns
data = [[1,2],[3,4],[5,8]]
data

# Create a DataFrame from the list and rename the columns
df = pd.DataFrame(data, columns=['num1','num2'])

df

# Create a Series from the DataFrame
s = df[['num1','num2']]
print(s)

"""Dictionary to Series and DataFrame"""

import pandas as pd

# Create a dictionary
data = {
    'name':['Adithi', 'Zannat', 'Rishan'],
    'age': [25, 24, 23],
    'city': ['Erlangen','Nuremburg','Munich']
}

data

# Create a Series from the dictionary
name_series = pd.Series(data['name'], name='Name')
name_series

df = pd.DataFrame(data)

df

age_series = df['age']

age_series

"""Set to Series and DataFrame"""

s1 = {1,2,3,4,5,7,10}
s1

type(s1)

s = pd.Series(list(s1))
s

df = pd.DataFrame(s1, columns=['set value'])
df

"""Tuple to Series and DataFrame"""

t = (1,2,3,54,6, True, False)
s = pd.Series(t)
s

df = pd.DataFrame(t, columns=['set'])
df

"""Numeric DataType in Pandas"""

import pandas as pd

# Creating a DataFrame with integer data
data = {'Age': [25, 30, 26, 28, 20, 22, 40, 28],
        'Salary': [50000, 65000, 45000, 67000, 32000, 48000, 80000, 56000]}
df = pd.DataFrame(data)
df

df.info()

df.dtypes

# Changing data type to int32
df['Age'] = df['Age'].astype('int32')
df['Salary'] = df['Salary'].astype('int32')
df

df.info()

# Changing data type to int32
df['Age'] = df['Age'].astype('int16')
df['Salary'] = df['Salary'].astype('int16')
df

# Creating a DataFrame with integer data
data = {'Age': [25, 30, 26, 28, 20, 22, 40, 28],
        'Salary': [50000, 65000, 45000, 67000, 32000, 48000, 80000, 56000]}
df = pd.DataFrame(data)
df

df.info()

# Changing data type to int32
df['Age'] = df['Age'].astype('float64')
df['Salary'] = df['Salary'].astype('float64')
df

df.info()

"""Object, Datetime Datatype

Heterogeneous Data: It can contain a mix of data types within a single column.

Flexibility: It can store a wide range of data types, making it versatile for handling diverse data.
Performance Considerations: Operations on object columns can be slower compared to other data types due to the heterogeneity of data.
Memory Usage: It can consume more memory compared to other data types, especially when dealing with large strings or complex objects.

Common use cases for the object dtype include:

Unstructured Data: Storing text data, such as descriptions, comments, or URLs.
Mixed Data: Handling columns that contain a combination of numeric and non-numeric values.
Intermediate Calculations: Storing temporary results during data processing before converting to more specific data types.
"""

import pandas as pd

# Create a dictionary with mixed data types
data = {'Name': ['Adithi', 'Zannat', 'Rishan'],
        'Age': [27, 24, 22],
        'Occupation': ['Data Scientist', 'Software Engineer', 'Teacher'],
        'Salary': [60000, 55000, 70000]
       }

data

# Create a DataFrame and check the data types
df = pd.DataFrame(data)
print(df.dtypes)

df

# Create a dictionary with mixed data types
data = {'Name': ['Adithi', 'Zannat', 'Rishan'],
        'Age': [27, 24, 22],
        'Occupation': ['Data Scientist', 'Software Engineer', 'Teacher'],
        'Salary': ['60000 euro', '55000 euro', '70000 euro']
       }

# Create a DataFrame and check the data types
df = pd.DataFrame(data)
print(df.dtypes)

df

"""Datetime"""

# Create a list of dates
dates = ['2023-10-04', '2024-11-15', '2025-01-01']

# Create a DataFrame with a datetime column
df1 = pd.DataFrame({'Date': dates})

# Check the data type of the 'Date' column
df1['Date'].dtype

timestamps = pd.to_datetime(dates)
df2 = pd.DataFrame({'Date2': timestamps})

df2.info()

# Create a list of dates
dates = ['2023', '2024-05-9', '2025']

# Create a DataFrame with a datetime column
df1 = pd.DataFrame({'Date': dates})

# Convert the 'Date' column to datetime with error handling and format specification
timestamps = pd.to_datetime(dates, errors='coerce', format='mixed') # Using errors='coerce' to handle invalid dates and format='mixed' to infer format individually
df2 = pd.DataFrame({'Date2': timestamps})

# Check the data type of the 'Date' column
df1['Date'].dtype

df2['Date2'].dtype

df2

dates = ['2023-10-04 12:34:56.123456789', '2023-11-15 15:23:45.987654321']
timestamps = pd.to_datetime(dates)
df = pd.DataFrame({'Date': timestamps})

print(df['Date'].dtype)

df

timestamps = pd.to_datetime(dates)
series = pd.Series(timestamps, name='dates')
series