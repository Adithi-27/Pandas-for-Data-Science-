# -*- coding: utf-8 -*-
"""Module 1.3 - Introduction to Pandas.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1X8d9de-Fq13RrMHqzuaGRaEgJNhp6Bq9

Contents

1. Statistical Functions
2. Value Sorting
3. Conditional Statements
4. loc, iloc. set_index
"""

import pandas as pd
df = pd.read_csv('/content/automobile.csv')

# Shape of the DataFrame
df.shape

# Top nth rows
df.head()

# Last nth rows
df.tail()

# Range of entries
df[5:10]

# Accessing the columns
df.price

df['price']

df.columns

# Accessing nth columns
df[['price']].head()

df[['price','bore']].head()

# Type of column
type(df['price'])

# Type of column
type(df[['bore']])

"""Basic Statistical Functions"""

import pandas as pd
df = pd.read_csv('/content/Screen Time Data.csv')
df.head()

df.shape

df.index

len(df)

df.columns

#max
df['Total Screen Time '].max()

#min
df['Total Screen Time '].min()

df['Total Screen Time '].mean()

df['Total Screen Time '].std()

df['Entertainment'].mode()

df['Entertainment'].value_counts()

#25%
df['Total Screen Time '].quantile(0.25)

#50%
df['Total Screen Time '].quantile(0.50)

#75%
df['Total Screen Time '].quantile(0.75)

#100%
df['Total Screen Time '].quantile(1)

#0%
df['Total Screen Time '].quantile(0)

df.describe()

"""Value Sorting"""

df.head()

df['Social Networking'].sort_values()

df['Social Networking'].sort_values(ascending=False)

df.nlargest(10, 'Social Networking')

df.nsmallest(10, 'Social Networking')

"""Conditional Statements"""

df.head()

df['Social Networking'].max()

df['Social Networking'] > 70

#subseting rows
df[df['Week Day'] == 'Wednesday']

#subseting rows
df[df['Week Day'] == 'Sunday']

#subseting rows
df[(df['Week Day'] == 'Wednesday') | (df['Week Day'] == 'Sunday')]

#subseting rows
df[(df['Week Day'] == 'Wednesday') & (df['Social Networking'] == 89)]

#Subsetting using isin()
df[df['Week Day'].isin(['Wednesday', 'Sunday'])]

"""Common Q&A"""

# Please show the rows in the dataframe where 'Week Day' is equal to 'Wednesday' and 'Entertainment' is equal to 0
df[(df['Week Day'] == 'Wednesday') & (df['Entertainment'] == 0)]

# Please show the index names in the dataframe where 'Productivity' is greater than 15
df['index'][df['Productivity']>15]

# Please show the Week Day names in the dataframe where 'Productivity' is greater than 15
df['Week Day'][df['Productivity']>15]

# Show the Rows with minimum Productivity
df[df['Productivity'] == df['Productivity'].min()]

# Show the Rows with maximum 'Total Screen Time '
df[df['Total Screen Time '] == df['Total Screen Time '].max()]

# Please show the index names, Week Day and Social Networking in the dataframe where 'Productivity' is greater than 15
df[['index','Week Day','Social Networking']] [df['Productivity']>15]

"""Loc & iloc"""

df.head()

#loc -> working with 'index value'. it also can be string.
#iloc -> working with 'index position'
df.loc[0]

df.iloc[0]

df.loc[0:3] #index value

df.iloc[0:3] #n-1

# Create a dictionary with mixed data types
data = {'Name': ['Adithi', 'Zannat', 'Rishan'],
        'Age': [27, 24, 22],
        'Occupation': ['Data Scientist', 'Software Engineer', 'Teacher'],
        'Salary': [80000, 55000, 70000]
       }

df2 = pd.DataFrame(data)
df2.head()

df2.set_index('Occupation')

#df2 = df2.set_index('Occupation')
df2.set_index('Occupation', inplace=True)

df2

df2.loc['Data Scientist']

df2.iloc[0]